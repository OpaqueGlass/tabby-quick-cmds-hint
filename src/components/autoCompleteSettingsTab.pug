h3(translate) Quick Cmd Hint Settings

.alert.alert-info.d-flex.align-items-center
    .me-auto
        div(translate) The plugin has been primarily developed for the following scenarios:

        ul 
            li(translate) Connecting to a server running Ubuntu via SSH;
            li(translate) Using Bash as the shell environment;
            li(translate) Tabby installed on a Windows system.
        
        div(translate) Other configurations or setups may not be supported.


h3(translate) General

.form-line
    .header
        .title(translate) Use regular expressions to identify shell prompts
        .description(translate) When enabled, the prompt may be triggered by mistake, or the wrong command may be captured, but it can avoid modifying the shell configuration file
    toggle(
        [(ngModel)]='config.store.ogAutoCompletePlugin.useRegExpDetectPrompt',
        (ngModelChange)='config.save()',
    )

.form-line
    .header
        .title(translate) Try to run init scripts when session connected
        .description(translate) For Bash Only. In some cases, it may not work properly.
    toggle(
        [(ngModel)]='config.store.ogAutoCompletePlugin.autoInit',
        (ngModelChange)='config.save()',
    )

.form-line
    .header
        .title(translate) Enable completion when startup
        .description(translate) When disabled, the autocomplete menu will not appear automatically, and users will need to enable the feature manually. You can manually control the auto-completion feature via the bird icon in the toolbar. Green means it is enabled.
    toggle(
        [(ngModel)]='config.store.ogAutoCompletePlugin.initWithCompleteStart',
        (ngModelChange)='config.save()',
    )


h3 AI

.form-line
    .header
        .title(translate) Open AI Base URL
        .description(translate) 
    input.form-control(
        type='text',
        [(ngModel)]='config.store.ogAutoCompletePlugin.ai.openAIBaseUrl',
        (ngModelChange)='config.save()',
    )

.form-line
    .header
        .title(translate) Open AI Key
        .description(translate) Note that all information will be saved in plain text locally
    input.form-control(
        type='password',
        [(ngModel)]='config.store.ogAutoCompletePlugin.ai.openAIKey',
        (ngModelChange)='config.save()',
    )


.form-line
    .header
        .title(translate) Open AI Model name
        .description(translate) 
    input.form-control(
        type='text',
        [(ngModel)]='config.store.ogAutoCompletePlugin.ai.openAIModel',
        (ngModelChange)='config.save()',
    )


h3(translate) Appearance

.form-line
    .header
        .title(translate) Font size
    input.form-control(
        type='number',
        max=90,
        min=2,
        [(ngModel)]='config.store.ogAutoCompletePlugin.appearance.fontSize',
        (ngModelChange)='config.save()',
    )


h3(translate) History

.form-line(translate) Open "Developer Tools", "Application", "Storage" "Indexed DB" in the list on the left, and manage the saved history in "og_tac_HistoryDB".

h3 Debug

.form-line
    .header
        .title(translate) Enable debug mode and detailed logs
        .description(translate) 0 All, 1 log, 2 warn, 3 ErrorOnly, 4 No log
    input.form-control(
        type='number',
        max=4,
        min=-2,
        [(ngModel)]='config.store.ogAutoCompletePlugin.debugLevel',
        (ngModelChange)='config.save()',
    )


.form-line 
    .header 
        .title(translate) Use a custom regular expression to match the shell prompt
        .description(translate) If it doesn't work, don't forget to check the output in the developer tools
textarea.form-control(
    rows='2',
    [(ngModel)]='config.store.ogAutoCompletePlugin.customRegExp',
    (ngModelChange)='config.save()'
)